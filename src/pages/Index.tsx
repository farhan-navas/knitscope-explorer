import { useCallback } from "react";
import { useNavigate } from "react-router-dom";
import { useGraphStore } from "@/store/graph-store";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Upload, GitBranch, Zap, FileText } from "lucide-react";
import { useToast } from "@/hooks/use-toast";

const Index = () => {
  const navigate = useNavigate();
  const { loadGraph } = useGraphStore();
  const { toast } = useToast();

  const handleFileUpload = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    if (!file.name.endsWith('.json')) {
      toast({
        title: "Invalid file type",
        description: "Please select a JSON file",
        variant: "destructive",
      });
      return;
    }

    const reader = new FileReader();
    reader.onload = (e) => {
      try {
        const content = e.target?.result as string;
        const graphData = JSON.parse(content);
        loadGraph(graphData);
        
        toast({
          title: "Graph loaded successfully",
          description: "Redirecting to graph explorer...",
        });
        
        navigate("/graph");
      } catch (error) {
        toast({
          title: "Parse error",
          description: "Failed to parse JSON file",
          variant: "destructive",
        });
      }
    };
    
    reader.readAsText(file);
  }, [loadGraph, navigate, toast]);

  const loadDemoGraph = async () => {
    try {
      const demoData = await import("@/data/demo-graph.json");
      loadGraph(demoData.default);
      
      toast({
        title: "Demo graph loaded",
        description: "Explore the sample dependency graph",
      });
      
      navigate("/graph");
    } catch (error) {
      toast({
        title: "Failed to load demo",
        description: "Could not load the demo graph",
        variant: "destructive",
      });
    }
  };

  return (
    <div className="space-y-8">
      {/* Hero Section */}
      <div className="text-center space-y-4">
        <div className="flex items-center justify-center gap-2 mb-6">
          <div className="flex h-12 w-12 items-center justify-center rounded-xl bg-primary text-primary-foreground">
            <GitBranch className="h-6 w-6" />
          </div>
          <h1 className="text-4xl font-bold gradient-text">KnitScope</h1>
        </div>
        
        <p className="text-xl text-muted-foreground max-w-2xl mx-auto">
          Visualize and analyze TikTok's Knit dependency injection graphs with interactive exploration, 
          cycle detection, and comprehensive reporting.
        </p>
      </div>

      {/* Import Section */}
      <div className="max-w-2xl mx-auto">
        <Card className="graph-card">
          <CardHeader className="text-center">
            <CardTitle className="flex items-center justify-center gap-2">
              <Upload className="h-5 w-5" />
              Import Dependency Graph
            </CardTitle>
            <CardDescription>
              Upload your knit-graph.json file or try the demo
            </CardDescription>
          </CardHeader>
          
          <CardContent className="space-y-6">
            {/* File Upload */}
            <div className="space-y-3">
              <Label htmlFor="graph-file">Upload JSON File</Label>
              <Input
                id="graph-file"
                type="file"
                accept=".json"
                onChange={handleFileUpload}
                className="cursor-pointer"
              />
              <p className="text-xs text-muted-foreground">
                Select a knit-graph.json file generated by the Gradle/ASM scanner
              </p>
            </div>

            {/* Demo Button */}
            <div className="text-center">
              <div className="relative">
                <div className="absolute inset-0 flex items-center">
                  <span className="w-full border-t" />
                </div>
                <div className="relative flex justify-center text-xs uppercase">
                  <span className="bg-background px-2 text-muted-foreground">Or</span>
                </div>
              </div>
              
              <Button 
                onClick={loadDemoGraph}
                className="btn-hero mt-4"
                size="lg"
              >
                <Zap className="h-4 w-4 mr-2" />
                Try Demo Graph
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Features Grid */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6 max-w-4xl mx-auto">
        <Card className="glass">
          <CardHeader>
            <GitBranch className="h-8 w-8 text-primary mb-2" />
            <CardTitle className="text-lg">Interactive Visualization</CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-sm text-muted-foreground">
              Explore dependency graphs with pan, zoom, filtering, and clustering by modules and packages.
            </p>
          </CardContent>
        </Card>

        <Card className="glass">
          <CardHeader>
            <FileText className="h-8 w-8 text-primary mb-2" />
            <CardTitle className="text-lg">Cycle Detection</CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-sm text-muted-foreground">
              Automatically detect circular dependencies and analyze strongly connected components.
            </p>
          </CardContent>
        </Card>

        <Card className="glass">
          <CardHeader>
            <Upload className="h-8 w-8 text-primary mb-2" />
            <CardTitle className="text-lg">Graph Comparison</CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-sm text-muted-foreground">
              Compare dependency graphs between versions to track architectural changes.
            </p>
          </CardContent>
        </Card>
      </div>
    </div>
  );
};

export default Index;
